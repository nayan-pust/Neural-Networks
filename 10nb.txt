import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels
target_names = iris.target_names

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Before PCA:", X_scaled.shape)

# Perform PCA (keep all components first)
pca = PCA()
X_pca_full = pca.fit_transform(X_scaled)

# Reduce to 2 principal components
X_pca = X_pca_full[:, :2]
print("After PCA (2 components):", X_pca.shape)

# Create a DataFrame for plotting
pca_df = pd.DataFrame(X_pca, columns=['PrincipalComponent1', 'PrincipalComponent2'])
pca_df['Target'] = [target_names[i] for i in y]

# Plot the PCA result
plt.figure(figsize=(8, 6))
sns.scatterplot(data=pca_df, x='PrincipalComponent1', y='PrincipalComponent2', hue='Target', style='Target', palette='Set2', s=80)
plt.title('PCA of Iris Dataset')
plt.grid(True)
plt.legend()
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.show()

# Explained variance
explained_variance = pca.explained_variance_ratio_[:2]
total_explained = np.sum(explained_variance)
print(f"Explained variance by component: {explained_variance}")
print(f"Total explained variance (first 2 components): {total_explained:.2f}")
